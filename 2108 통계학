# 미완성

from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN
def my_round(in_number, ndigits=0, rounding_rule=1):
    """rounding_rule==1: ROUND_HALF_UP, Round to nearest, ties away from zero
       rounding_rule==2: ROUND_HALF_EVEN, Round to nearest, ties to even """
    # make float expression
    if ndigits > 0:
        expression = '0.' + '0'*ndigits
        number = in_number
    else: # 0 or negative
        expression = '0'
        number = in_number / (10**(-ndigits))
    
    # round by rounding rule
    if rounding_rule == 2:
        round_number = Decimal(number).quantize(Decimal(expression), rounding=ROUND_HALF_EVEN)
    else:
        round_number = Decimal(number).quantize(Decimal(expression), rounding=ROUND_HALF_UP)
    
    # return number
    if ndigits > 0:
        return float(round_number)
    else: # 0 or negative
        return int(round_number * (10**(-ndigits)))

def mode(lst):
    freq = {x:lst.count(x) for x in set(lst)}
    if len(freq) == 1 or len(freq) == len(lst):
        temp = lst[:]
        if len(temp) == 1: return min(temp)
        temp.remove(min(temp))
        return min(temp)
    else:
        return [x for x in freq.keys() if freq[x] == max(freq.values())]

    
n = int(input())
a = []
for i in range(n):
    a.append(int(input()))

#avg
hap = 0
for i in a:
    hap += i
a.sort()
print(my_round(hap / len(a)))
print(a[len(a)//2])
print(mode(a))
print(max(a) - min(a))
